<html window-frame="solid-with-shadow" window-blurbehind="light" theme="light" window-resizable window-frame="none">
	<head>
		<title>D3pixelbot canvas viewer</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<style>
			//@import url("styles/flat-theme.css");
			@import url("styles/toggler.css");
			@import url("prototypes/pixcanvas/pixcanvas.css");
			@import url("prototypes/timeslider/timeslider.css");

            html {
				background: rgba(0, 0, 0, 0);
			}
			
			body {
				flow:	"1 2"
						"3 3";
				font:system;
				margin: 0;
			}

			#sidebar {
				padding: 1em;
			}

			#sidebar > span {
				font-size: 1.5em;
			}

			input[type=path] { 
				display: inline-block;
				prototype: PathInput;
				font: system;
				flow: horizontal;
				border: 1dip solid threedshadow;
				background: window;
				height: 1.8em;
			}

			input[type=path] > caption {
				display: block;
				flow: text;
				behavior: edit;
				white-space: pre;
				overflow-x: hidden;
				text-overflow: path-ellipsis;
				line-height: 1.8em;
				width: *;
				padding: 0 4dip;
			}

			input[type=path] > button {
				display: block;
				style-set: none;
				behavior: clickable;
				width: 0.8em;
				height: *;
				background: url(stock:arrow-down) no-repeat 50% 50%;
			}

			input[type=path] {
				width: *;
			}

			.table {
				flow: row(label, select input output div textarea button);
				border-spacing: 6dip;
			}
			.table > label {
				min-width:max-content;
				display: block;
				padding: 4dip;
				white-space: nowrap;
				horizontal-align: left;
			}

			.hidden, .hidden * {
				visibility: collapse;
				height: 0;
			}

			pixcanvas {
				background-color: rgba(0, 0, 0, 0.25);
				width: *;
				height: *;
			}
			
		</style>
		<script type="text/tiscript">
			var pc = $(pixcanvas);

			// TODO: Clean up and redesign UI

			class PathInput : Element {
				function attached() {
					this.update(this.attributes["value"]);
				}

				function update(path) {
					this.$content(<caption>{path}</caption><button/>);
				}

				event focusout {
					// reset content to show ellipsis
					this.update(this.value);
				}

				property value(v) {
					get return this.$(caption).text; 
					set this.update(v);
				}

				event click $(button) {
					var fn = view.selectFile(#save, "PNG files (*.png)|*.png|All Files (*.*)|*.*", "png", URL.fromPath(this.value));
					if( fn ) this.update(URL.toPath(fn));
				}
			}

			$(#zoom).on("change", function() {
				pc.setZoom(this.value-8);
			});

			pc.zoomCallback = function(zoomLevel) {
				$(#zoom).value = zoomLevel+8;
			};

			$(#replay-time > input(Date)).on("change", function() { // TODO: Create single gadget for date and time
				var formValues = $(#replay-time).value;
				var rd = formValues.Date;
				var rt = formValues.Time;
				var t = Date.local(rd.year, rd.month, rd.day, rt.hour, rt.minute, rt.second);
				$(timeslider).replayTime = t;
				view.setReplayTime(t);
			});

			$(#replay-time > input(Time)).on("change", function() {
				var formValues = $(#replay-time).value;
				var rd = formValues.Date;
				var rt = formValues.Time;
				var t = Date.local(rd.year, rd.month, rd.day, rt.hour, rt.minute, rt.second);
				$(timeslider).replayTime = t;
				view.setReplayTime(t);
			});

			var timeTrigger;

			function saveImage() {
				var formValues = $(#output).value;
				var filename = formValues.Filename;
				filename = filename.replace("%count%", String.printf("%05d", formValues.Counter))
				var err = view.saveImage(formValues.Rect, formValues.Size, filename, function() {timeTrigger = null;});
				if (err) {
					timeTrigger = null;
				}
				$(#output > input(Counter)).value ++;
			}

			$(#btn-save-image).on("click", function() {
				saveImage();
			});

			pc.timeCallback = function(t) {
				$(#replay-current-time).value = {
					Date: t,
					Time: t
				};

				$(timeslider).currentTime = t;

				if ($(#output).value.Autosave && timeTrigger && t.valueOf() >= timeTrigger.valueOf()) {
					saveImage();
				}
			};

			// Autoplay timer (~25 fps)
			pc.timer(40ms, function() {
				var value = $(#replay-settings).value;

				if (!value.Autoplay) {
					return true;
				}

				if (timeTrigger && $(#output).value.Autosave) {
					return true;
				}

				var interval = $(#replay-settings > input(Interval)).value;
				var limit = $(#replay-settings > input(Limit)).value;

				if ($(#output > input(Counter)).value >= limit) {
					return true;
				}

				if (!interval || interval <= 0) {
					return true;
				}

				var timeValues = $(#replay-time).value;
				var rd = timeValues.Date;
				var rt = timeValues.Time;
				if (!rd || !rt) return true;
				var ms = Date.local(rd.year, rd.month, rd.day, rt.hour, rt.minute, rt.second).valueOf();
				ms += interval * 1000;
				var t = new Date(ms);
				
				$(#replay-time).value = {
					Date: t,
					Time: t
				};

				$(timeslider).replayTime = t;
				view.setReplayTime(t);

				if ($(#output).value.Autosave) {
					timeTrigger = t;
				}

				return true;
			});

			pc.mouseCallback = function(x, y) {
				$(#canvas-settings > output(MouseX)).value = x;
				$(#canvas-settings > output(MouseY)).value = y;
			};

			function self.ready() {
				//view.connectToInspector();
				
				var result = view.hasReplayTime();
				if (result.Recs && result.Recs.length > 0) {
					$(timeslider).recordings = result.Recs;
					$(#replay-time).value = {
						Date: result.Recs[0].StartTime,
						Time: result.Recs[0].StartTime
					};
					$(timeslider).replayTime = result.Recs[0].StartTime;
					$(timeslider).replayTimeCallback = function (t) {
						$(#replay-time).value = {
							Date: t,
							Time: t
						};
						view.setReplayTime(t);
					};
				} else {
					for (var elem in $$(.replay-hide)) {
						elem.attributes.toggleClass("hidden", true);
					}
				}
			}

			function self.closing() {
				pc.remove(); // So detached is called
				view.signalClosed();
			}
		</script>
	</head>
	
	<body>

		<div#sidebar>
			<span.replay-hide>Replay</span>
			<form.table.replay-hide#replay-current-time>
				<label>Canvas Date:</label>
				<output|date-local(Date)/>
				<label>Canvas Time:</label>
				<output|time-local(Time)/>
			</form>
			<form.table.replay-hide#replay-time>
				<label>Start Date:</label>
				<input|date(Date)/>
				<label>Start Time:</label>
				<input|time(Time)/>
			</form>
			<form.table.replay-hide#replay-settings>
				<label>Autoplay:</label>
				<button|toggler(Autoplay) checked=false>
					<caption .false>Pause</caption>
					<caption .true>Play</caption>
				</button>
				<label>Interval:</label>
				<input|decimal(Interval) min=1 max=1000000 step=1 value=1/>
				<label>Limit:</label>
				<input|integer(Limit) min=1 max=1000000 step=1 value=100/>
			</form>
			<span>Image output</span>
			<form.table#output>
				<label>Canvas:</label>
				<div.table(Rect)>
					<label>Min (X, Y):</label><div(Min)><input|integer(X) min=-10000000 max=10000000 step=1 value=-100/><input|integer(Y) min=-10000000 max=10000000 step=1 value=-100/></div>
					<label>Max (X, Y):</label><div(Max)><input|integer(X) min=-10000000 max=10000000 step=1 value=100/><input|integer(Y) min=-10000000 max=10000000 step=1 value=100/></div>
				</div>
				<label>Image Size:</label>
				<div.table(Size)>
					<label>X, Y:</label><div><input|integer(X) min=1 max=10000 step=1 value=200/><input|integer(Y) min=1 max=10000 step=1 value=200/></div>
				</div>
				<label>Filename:</label>
				<input|path(Filename) value="./recordings/output_%count%.png"/>
				<label>Counter:</label>
				<input|integer(Counter) min=0 max=1000000 step=1 value=0/>
				<label.replay-hide>Autosave:</label>
				<button|toggler.replay-hide(Autosave) checked=false>
					<caption .false>Manually</caption>
					<caption .true>Automatic</caption>
				</button>
				<label>Save:</label>
				<button#btn-save-image>Save now</button>
			</form>
			<span>Canvas</span>
			<form.table#canvas-settings>
				<label>Players:</label>
				<output|integer(playerCount)/>
				<label>MouseX:</label>
				<output|integer(MouseX)/>
				<label>MouseY:</label>
				<output|integer(MouseY)/>
				<label>Zoom:</label>
				<input|hslider #zoom min=0 max=24 value=8 />
			</form>
		</div>
		
		<pixcanvas>
			<div.canvasContainer>
				<div.chunkContainer>
					<!--<img style="width:128px; height:64px; top: 1000000px; left: 1000000px; background-color: beige">-->
				</div>
			</div>
		</pixcanvas>

		<timeslider.replay-hide>
			<div.scrollContainer>
				<div.timeContainer>
				</div>
			</div>
		</timeslider>
		
	</body>
	
</html>
