<html window-frame="solid-with-shadow" window-blurbehind="light" theme="light" window-resizable window-frame="none">
	<head>
		<title>D3pixelbot canvas viewer</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<style>
			//@import url("styles/flat-theme.css");
			@import url("prototypes/pixcanvas/pixcanvas.css");

            html {
				background: rgba(0, 0, 0, 0);
			}
			
			body {
				flow:	"1 2";
				font:system;
				margin: 0;
			}

			#sidebar {
				padding: 1em;
			}

			#sidebar > span {
				font-size: 1.5em;
			}

			input[type=path] { 
				display: inline-block;
				prototype: PathInput;
				font: system;
				flow: horizontal;
				border: 1dip solid threedshadow;
				background:  window;
				height: 1.8em;
			}

			input[type=path] > caption {
				display: block;
				flow: text;
				behavior: edit;
				white-space: pre;
				overflow-x: hidden;
				text-overflow: path-ellipsis;
				line-height: 1.8em;
				width: *;
				padding: 0 4dip;
			}

			input[type=path] > button {
				display: block;
				style-set: none;
				behavior: clickable;
				width: 0.8em;
				height: *;
				background: url(stock:arrow-down) no-repeat 50% 50%;
			}

			input[type=path] {
				width: *;
			}

			.table {
				flow: row(label, select input output div textarea button);
				border-spacing: 6dip;
			}
			.table > label {
				padding: 4dip;
				white-space: nowrap;
				horizontal-align: left;
			}

			pixcanvas {
				background-color: rgba(0, 0, 0, 0.25);
				width: *;
				height: *;
			}
			
		</style>
		<script type="text/tiscript">
			var pc = $(pixcanvas);

			// TODO: Clean up and redesign UI

			class PathInput : Element {
				function attached() {
					this.update(this.attributes["value"]);
				}

				function update(path) {
					this.$content(<caption>{path}</caption><button/>);
				}

				event focusout {
					// reset content to show ellipsis
					this.update(this.value);
				}

				property value(v) {
					get return this.$(caption).text; 
					set this.update(v);
				}

				event click $(button) {
					var fn = view.selectFile(#save, "PNG files (*.png)|*.png|All Files (*.*)|*.*", "png", this.value);
					if( fn ) this.update(fn);
				}
			}

			$(#zoom).on("change", function() {
				pc.setZoom(this.value-2);
			});

			$(#replay-input > input(Date)).on("change", function() { // TODO: Create single gadget for date and time
				var formValues = $(#replay-input).value;
				var rd = formValues.Date;
				var rt = formValues.Time;
				view.setReplayTime(Date.local(rd.year, rd.month, rd.day, rt.hour, rt.minute, rt.second));
			});

			$(#replay-input > input(Time)).on("change", function() {
				var formValues = $(#replay-input).value;
				var rd = formValues.Date;
				var rt = formValues.Time;
				view.setReplayTime(Date.local(rd.year, rd.month, rd.day, rt.hour, rt.minute, rt.second));
			});

			pc.timeCallback = function(t) {
				$(#replay-output).value = {
					CanvasDate: t,
					CanvasTime: t
				};
			};

			function self.ready() {
				view.connectToInspector();
				$(#replay-output).value = {
					CanvasDate: Date.now(),
					CanvasTime: Date.now()
				};
				$(#replay-input).value = {
					Date: Date.now(),
					Time: Date.now()
				};
			}

			function self.closing() {
				pc.remove(); // So detached is called
				view.signalClosed();
			}
		</script>
	</head>
	
	<body>

		<div#sidebar>
			<span>Replay</span>
			<form.table#replay-output>
				<label>Canvas Date: </label>
				<output|date-local(CanvasDate)/>
				<label>Canvas Time:</label>
				<output|time-local(CanvasTime)/>
			</form>
			<form.table#replay-input>
				<label>Input Date: </label>
				<input|date(Date)/>
				<label>Input Time:</label>
				<input|time(Time)/>
				<label>OutputRect:</label>
				<div.table(Rect)>
					<label>Min (X, Y):</label><div(Min)><input|integer(X) min=-10000000 max=10000000 step=1/><input|integer(Y) min=-10000000 max=10000000 step=1/></div>
					<label>Max (X, Y):</label><div(Max)><input|integer(X) min=-10000000 max=10000000 step=1/><input|integer(Y) min=-10000000 max=10000000 step=1/></div>
				</div>
				<label>Output Size:</label>
				<div.table(Size)>
					<label>X, Y:</label><div><input|integer(X) min=1 max=2000 step=1/><input|integer(Y) min=1 max=2000 step=1/></div>
				</div>
				<label>Output File:</label>
				<input|path value="output.png"/>
			</form>
			<span>Canvas</span>
			<form.table#data>
				<label>Players: </label>
				<output|integer(playerCount)/>
				<label>MouseX: </label>
				<output|integer(mouseX)/>
				<label>MouseY: </label>
				<output|integer(mouseY)/>
				<label>Zoom:</label>
				<input|hslider #zoom min=0 max=4 value=2 />
			</form>
		</div>
		
		<pixcanvas>
			<div.canvasContainer>
				<div.chunkContainer>
					<!--<img style="width:128px; height:64px; top: 1000000px; left: 1000000px; background-color: beige">-->
				</div>
			</div>
		</pixcanvas>
		
	</body>
	
</html>
