class PixCanvas : Behavior {
	function attached() {
		this.canvasWidth = 1999999;
		this.canvasHeight = 1999999; // TODO: Get correct values from the canvas instance
		this.canvasCenterX = 1000000; // Offset to the center coordinate, as the container can't be moved
		this.canvasCenterY = 1000000;

		this.timer(1s, function() {
			var left = this.scroll(#left);
			var top = this.scroll(#top);
			var width = this.scroll(#width);
			var height = this.scroll(#height);

			left = left - this.canvasCenterX;
			top = top - this.canvasCenterY;

			var rect = {
				Min: {X: left, Y: top},
				Max: {X: left+width, Y: top+height}
			};
			view.queryRect(rect);
			return true; // keep timer running
		});

		this.$(> div).style.set({
			width: this.canvasWidth,
			height: this.canvasHeight 
		});

		//this.scrollTo(this.canvasCenterX, this.canvasCenterY, false, true);
	}

	function eventSetImage(event) {
		var (x, y) = (event.X, event.Y);
		var (width, height) = (event.Width, event.Height)
		function imagePainter(img) {
			var array = Bytes.fromString(event.Array);
			var stride = width * 4;
			for (var iy = 0; iy < height; iy++) {
				for (var ix = 0; ix < width; ix++) {
					var offset = ix * 4 + iy*stride;
					var color = Graphics.RGBA(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
					img.colorAt(ix, iy, color); // TODO: Replace colorAt, convert image in go if possible
				}
			}
		}
		var imgElement = new Element("img");
		this.$(>div).append(imgElement);
		var img = new Image(width, height, Graphics.RGBA("white"), function(gfx) {});
		if (event.Array) {
			imagePainter(img);
		}
		imgElement.bindImage("in-memory:chunk:"+x+":"+y, img);
		imgElement.attributes["src"] = "in-memory:chunk:"+x+":"+y;
		imgElement.style.set({
			width: width,
			height: height,
			left: x + this.canvasCenterX,
			top: y + this.canvasCenterY
		});
		imgElement.img = img;
	}

	function eventHandler(e) {
		switch (e.Type) {
			case "SetImage": {
				this.eventSetImage(e);
				break;
			}
		}
	}

	function draw(gfx) {
		var (viewOffsetX, viewOffsetY, viewZoom) = (this.viewOffsetX, this.viewOffsetY, this.viewZoom);
		
		var (left, top, right, bottom) = this.scroll(#rect);
		debug : top;
		gfx.save();
		//gfx.translate(0.5, 0.5);
		gfx.pushLayer(#inner-box);
		
		//gfx.lineCap = Graphics.CAP_ROUND;
		//gfx.lineWidth(1);
		//gfx.lineColor(color(0, 0, 0));

		for(var chunk in this.chunks) {
        	gfx.drawImage(chunk.img, chunk.x, chunk.y);
		}

		gfx.popLayer();
		gfx.restore();
	}
}