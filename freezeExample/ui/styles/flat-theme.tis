
namespace Flat {

  function Nullable() 
  {
    this << event ~mousedown(evt) {
      if( evt.isOnIcon ) { 
        if(this.execCommand("edit:selectall")) // to make it undoable
          this.execCommand("edit:delete-next");
        else 
          this.value = undefined; 
        return true;
      }
    }
  }

  function HSlider() 
  {
    var button = this.$(button);
    this.paintContent = function(gfx) // using paintContent here to draw on top of background
    {
      var (x1,y1,x2,y2) = button.box(#rect,#border,#parent);
      var (w,h) = this.box(#dimension,#inner);
      gfx.fillColor( button.style["background-color"] )
         .rectangle(0,0,(x1+x2)/2,h);
    }
  }

  function Progress() 
  {
    var _max = (this.attributes["max"] || "100").toFloat();   
    var _min = (this.attributes["min"] || "0").toFloat();   
    
    var _val;
    
    function paintValue(gfx) 
    {
      var (w,h) = this.box(#dimension,#inner);
      var sw = _val / (_max - _min) * w;
      gfx.fillColor( this.style#color )
         .rectangle(0,0,sw,h);
      return true;
    }

    var pos = -0.25; // 

    function step() {
      if( _val !== undefined ) { this.refresh(); return false; }
      pos += 0.02;
      if( pos > 1.25) 
        pos = -0.25;
      this.refresh();
      return true;
    }     

    function paintNoValue(gfx) 
    {
      var (w,h) = this.box(#dimension,#inner);
      var x = pos * w;
      w = w * 0.25;
      gfx.fillColor( this.style#color )
         .pushLayer(#inner-box)
         .rectangle(x,0,w,h)
         .popLayer();
      return true;
    }

    this[#value] = property(v) {
      get return _val;
      set {
        if( v === undefined ) {
          _val = undefined;
          pos = -0.25;
          this.paintContent = paintNoValue;
          //this.timer(16ms,step);
          this.animate(step);
        }
        else if(v !== _val)
        {
          this.paintContent = paintValue;
          _val = Float.min(v,_max);
          _val = Float.max(_val,_min);
        }
        this.refresh();
      }
    }

    this.value = parseData(this.attributes["value"] || "");

  }


}